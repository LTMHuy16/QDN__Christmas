@mixin mq($viewports, $constraint1: min, $constraint2: width) {
  $min: min-#{$constraint2};
  $max: max-#{$constraint2};
  @if (type-of($viewports) == number) {
    @media screen and (#{$constraint1}-#{$constraint2}: $viewports) {
      @content;
    }
  } @else {
    @media screen and ($min: nth($viewports, 1)) and ($max: nth($viewports, 2)) {
      @content;
    }
  }
}

@mixin clearfix() {
  // Usage: @include clearfix();
  *zoom: 1;
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin appearance-none() {
  // Usage: appearance-none();
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

@mixin box-sizing($box-model) {
  // Usage: @include box-sizing(border-box);
  -webkit-box-sizing: $box-model;
  -moz-box-sizing: $box-model;
  box-sizing: $box-model;
}

@mixin box-shadow($box-shadow) {
  // Usage: @include box-shadow(box-shadow);
  -webkit-box-shadow: $box-shadow;
  -moz-box-shadow: $box-shadow;
  box-shadow: $box-shadow;
}

@mixin full-width() {
  // Usage: @include full-width();
  width: 100%;
  @include box-sizing(border-box);
}

@mixin max-full-width() {
  // Usage: @include max-full-width();
  max-width: 100%;
  @include box-sizing(border-box);
}

@mixin image-2x($image, $width, $height) {
  // Usage: @include image-2x("logo2x.png", 100px, 25px);
  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin opacity($opacity) {
  // Usage: @include opacity(0.8);
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); // IE8
}

@mixin border-radius($radius) {
  // Usage: @include border-radius(10px);
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: border-box;
}

@mixin border-top-radius($radius) {
  // Usage: @include border-top-radius(10px);
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}

@mixin border-right-radius($radius) {
  // Usage: @include border-right-radius(10px);
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  background-clip: padding-box;
}

@mixin border-bottom-radius($radius) {
  // Usage: @include border-bottom-radius(10px);
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  background-clip: padding-box;
}

@mixin border-left-radius($radius) {
  // Usage: @include border-left-radius (10px);
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}

@mixin transition($values...) {
  //Usage: transition();
  -webkit-transition: $values;
  -moz-transition: $values;
  -o-transition: $values;
  -ms-transition: $values;
  transition: $values;
}

@mixin transform($values...) {
  //Usage: transform();
  -webkit-transform: $values;
  -moz-transform: $values;
  -o-transform: $values;
  -ms-transform: $values;
  transform: $values;
}

@mixin transform-origin($values...) {
  //Usage: transform-origin();
  -webkit-transform-origin: $values;
  -moz-transform-origin: $values;
  -o-transform-origin: $values;
  -ms-transform-origin: $values;
  transform-origin: $values;
}

@mixin backface-visibility($values...) {
  //Usage: transform-origin();
  -webkit-backface-visibility: $values;
  -moz-backface-visibility: $values;
  -o-backface-visibility: $values;
  -ms-backface-visibility: $values;
  backface-visibility: $values;
}

@mixin transparent-background($color: #000, $value: 0.5) {
  $start: "rgb(";
  $end: ")";
  background: #{$start} red($color), green($color), blue($color) #{$end};
  background: rgba($color, $value);
}

@mixin background-size($first, $second: null) {
  // usage:
  // @include background-size(100%, 50%);
  // @include background-size(100%); (second value is then 'auto')
  // @include background-size(contain);
  // @include background-size(auto, 50%);
  // @include background-size(inherit);
  @if type-of($first) !=string {
    @if $second==null {
      $second: auto;
    }
  }

  -webkit-background-size: $first $second;
  -moz-background-size: $first $second;
  -o-background-size: $first $second;
  background-size: $first $second;
}

@mixin color-opacity($RGB_background: #fff, $RGB_color: #000, $value: 0.5) {
  $RGBA_color: rgba($RGB_color, $value);
  $alpha: alpha($RGBA_color);
  $red: (1 - $alpha) * red($RGB_background) + $alpha * red($RGB_color);
  $green: (1 - $alpha) * green($RGB_background) + $alpha * green($RGB_color);
  $blue: (1 - $alpha) * blue($RGB_background) + $alpha * blue($RGB_color);
  color: rgb($red, $green, $blue);
}

@mixin boxicons() {
  font-family: boxicons !important;
  font-weight: 400;
  font-style: normal;
  font-variant: normal;
  line-height: 1;
  display: inline-block;
  text-transform: none;
  speak: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin fontawesome {
  font-family: "Font Awesome 5 Free";
  font-style: normal;
  font-variant-caps: normal;
  font-variant-ligatures: normal;
  height: 16px;
  width: 16px;
  line-height: 16px;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
}
